{"mappings":"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","sources":["src/PlugNmeet.ts","src/ApiTransport.ts"],"sourcesContent":["import { ApiTransport } from './ApiTransport';\nimport { CreateRoomParams, CreateRoomResponse } from './types/createRoom';\nimport { JoinTokenParams, JoinTokenResponse } from './types/joinToken';\nimport { IsRoomActiveParams, IsRoomActiveResponse } from './types/isRoomActive';\nimport {\n  ActiveRoomInfoParams,\n  ActiveRoomInfoResponse,\n} from './types/activeRoomInfo';\nimport { ActiveRoomsInfoResponse } from './types/activeRoomsInfo';\nimport { EndRoomParams, EndRoomResponse } from './types/endRoom';\nimport {\n  FetchRecordingsParams,\n  FetchRecordingsResponse,\n} from './types/fetchRecordings';\nimport {\n  DeleteRecordingsParams,\n  DeleteRecordingsResponse,\n} from './types/deleteRecordings';\nimport {\n  RecordingDownloadTokenParams,\n  RecordingDownloadTokenResponse,\n} from './types/recordingDownloadToken';\nimport { ClientFilesResponse } from './types/clientFiles';\nimport {\n  FetchRoomsInfoResponse,\n  FetchPastRoomsInfoParams,\n} from './types/fetchPastRoomsInfo';\nimport {\n  FetchAnalyticsParams,\n  FetchAnalyticsResponse,\n} from './types/fetchAnalytics';\nimport {\n  DeleteAnalyticsParams,\n  DeleteAnalyticsResponse,\n} from './types/deleteAnalytics';\nimport {\n  AnalyticsDownloadTokenParams,\n  AnalyticsDownloadTokenResponse,\n} from './types/analyticsDownloadToken';\nimport { PlugNmeetAPI } from './types/PlugNmeetAPI';\n\nexport class PlugNmeet implements PlugNmeetAPI {\n  protected defaultPath = '/auth';\n  private apiTransport: ApiTransport;\n\n  /**\n   * @param serverUrl plugNmeet server URL\n   * @param apiKey plugNmeet API_Key\n   * @param apiSecret plugNmeet API_Secret\n   */\n  constructor(serverUrl: string, apiKey: string, apiSecret: string) {\n    this.apiTransport = new ApiTransport(\n      serverUrl + this.defaultPath,\n      apiKey,\n      apiSecret,\n    );\n  }\n\n  /**\n   * Create new room\n   * @param params\n   * @returns Promise<CreateRoomResponse>\n   */\n  public async createRoom(\n    params: CreateRoomParams,\n  ): Promise<CreateRoomResponse> {\n    const output = await this.apiTransport.sendRequest('/room/create', params);\n    if (!output.status) {\n      return {\n        status: false,\n        msg: output.response,\n      };\n    }\n\n    return {\n      status: output.response.status,\n      msg: output.response.msg,\n      room_info: output.response.room_info,\n    };\n  }\n\n  /**\n   * Generate join token\n   * @param params\n   * @returns Promise<JoinTokenResponse>\n   */\n  public async getJoinToken(\n    params: JoinTokenParams,\n  ): Promise<JoinTokenResponse> {\n    const output = await this.apiTransport.sendRequest(\n      '/room/getJoinToken',\n      params,\n    );\n    if (!output.status) {\n      return {\n        status: false,\n        msg: output.response,\n      };\n    }\n\n    return {\n      status: output.response.status,\n      msg: output.response.msg,\n      token: output.response.token,\n    };\n  }\n\n  /**\n   * If room is active or not\n   * @param params\n   * @returns Promise<IsRoomActiveResponse>\n   */\n  public async isRoomActive(\n    params: IsRoomActiveParams,\n  ): Promise<IsRoomActiveResponse> {\n    const output = await this.apiTransport.sendRequest(\n      '/room/isRoomActive',\n      params,\n    );\n    if (!output.status) {\n      return {\n        status: false,\n        msg: output.response,\n      };\n    }\n\n    return {\n      status: output.response.status,\n      is_active: output.response.is_active,\n      msg: output.response.msg,\n    };\n  }\n\n  /**\n   * Get active room information\n   * @param params\n   * @returns Promise<ActiveRoomInfoResponse>\n   */\n  public async getActiveRoomInfo(\n    params: ActiveRoomInfoParams,\n  ): Promise<ActiveRoomInfoResponse> {\n    const output = await this.apiTransport.sendRequest(\n      '/room/getActiveRoomInfo',\n      params,\n    );\n    if (!output.status) {\n      return {\n        status: false,\n        msg: output.response,\n      };\n    }\n\n    return {\n      status: output.response.status,\n      msg: output.response.msg,\n      room: output.response.room,\n    };\n  }\n\n  /**\n   * Get all active rooms\n   * @returns Promise<ActiveRoomsInfoResponse>\n   */\n  public async getActiveRoomsInfo(): Promise<ActiveRoomsInfoResponse> {\n    const output = await this.apiTransport.sendRequest(\n      '/room/getActiveRoomsInfo',\n      {},\n    );\n    if (!output.status) {\n      return {\n        status: false,\n        msg: output.response,\n      };\n    }\n\n    return {\n      status: output.response.status,\n      msg: output.response.msg,\n      rooms: output.response.rooms,\n    };\n  }\n\n  /**\n   * Fetch info about past rooms\n   * @param params\n   * @returns Promise<FetchRoomsInfoResponse>\n   */\n  public async fetchPastRoomsInfo(\n    params: FetchPastRoomsInfoParams,\n  ): Promise<FetchRoomsInfoResponse> {\n    const output = await this.apiTransport.sendRequest(\n      '/room/fetchPastRooms',\n      params,\n    );\n    if (!output.status) {\n      return {\n        status: false,\n        msg: output.response,\n      };\n    }\n\n    return {\n      status: output.response.status,\n      msg: output.response.msg,\n      result: output.response.result,\n    };\n  }\n\n  /**\n   * End active room\n   * @param params\n   * @returns Promise<EndRoomResponse>\n   */\n  public async endRoom(params: EndRoomParams): Promise<EndRoomResponse> {\n    const output = await this.apiTransport.sendRequest('/room/endRoom', params);\n    if (!output.status) {\n      return {\n        status: false,\n        msg: output.response,\n      };\n    }\n\n    return {\n      status: output.response.status,\n      msg: output.response.msg,\n    };\n  }\n\n  /**\n   * Fetch analytics\n   * @param params\n   * @returns Promise<FetchAnalyticsResponse>\n   */\n  public async fetchAnalytics(\n    params: FetchAnalyticsParams,\n  ): Promise<FetchAnalyticsResponse> {\n    const output = await this.apiTransport.sendRequest(\n      '/analytics/fetch',\n      params,\n    );\n    if (!output.status) {\n      return {\n        status: false,\n        msg: output.response,\n      };\n    }\n\n    return {\n      status: output.response.status,\n      msg: output.response.msg,\n      result: output.response.result,\n    };\n  }\n\n  /**\n   * Delete analytics\n   * @param params\n   * @returns Promise<DeleteAnalyticsResponse>\n   */\n  public async deleteAnalytics(\n    params: DeleteAnalyticsParams,\n  ): Promise<DeleteAnalyticsResponse> {\n    const output = await this.apiTransport.sendRequest(\n      '/analytics/delete',\n      params,\n    );\n    if (!output.status) {\n      return {\n        status: false,\n        msg: output.response,\n      };\n    }\n\n    return {\n      status: output.response.status,\n      msg: output.response.msg,\n    };\n  }\n\n  /**\n   * Generate token to download recording\n   * @param params\n   * @returns Promise<AnalyticsDownloadTokenResponse>\n   */\n  public async getAnalyticsDownloadToken(\n    params: AnalyticsDownloadTokenParams,\n  ): Promise<AnalyticsDownloadTokenResponse> {\n    const output = await this.apiTransport.sendRequest(\n      '/analytics/getDownloadToken',\n      params,\n    );\n    if (!output.status) {\n      return {\n        status: false,\n        msg: output.response,\n      };\n    }\n\n    return {\n      status: output.response.status,\n      msg: output.response.msg,\n      token: output.response.token,\n    };\n  }\n\n  /**\n   * Fetch recordings\n   * @param params\n   * @returns Promise<FetchRecordingsResponse>\n   */\n  public async fetchRecordings(\n    params: FetchRecordingsParams,\n  ): Promise<FetchRecordingsResponse> {\n    const output = await this.apiTransport.sendRequest(\n      '/recording/fetch',\n      params,\n    );\n    if (!output.status) {\n      return {\n        status: false,\n        msg: output.response,\n      };\n    }\n\n    return {\n      status: output.response.status,\n      msg: output.response.msg,\n      result: output.response.result,\n    };\n  }\n\n  /**\n   * Delete recording\n   * @param params\n   * @returns Promise<DeleteRecordingsResponse>\n   */\n  public async deleteRecordings(\n    params: DeleteRecordingsParams,\n  ): Promise<DeleteRecordingsResponse> {\n    const output = await this.apiTransport.sendRequest(\n      '/recording/delete',\n      params,\n    );\n    if (!output.status) {\n      return {\n        status: false,\n        msg: output.response,\n      };\n    }\n\n    return {\n      status: output.response.status,\n      msg: output.response.msg,\n    };\n  }\n\n  /**\n   * Generate token to download recording\n   * @param params\n   * @returns Promise<RecordingDownloadTokenResponse>\n   */\n  public async getRecordingDownloadToken(\n    params: RecordingDownloadTokenParams,\n  ): Promise<RecordingDownloadTokenResponse> {\n    const output = await this.apiTransport.sendRequest(\n      '/recording/getDownloadToken',\n      params,\n    );\n    if (!output.status) {\n      return {\n        status: false,\n        msg: output.response,\n      };\n    }\n\n    return {\n      status: output.response.status,\n      msg: output.response.msg,\n      token: output.response.token,\n    };\n  }\n\n  /**\n   * To get JS & CSS files to build interface\n   * @returns Promise<ClientFilesResponse>\n   */\n  public async getClientFiles(): Promise<ClientFilesResponse> {\n    const output = await this.apiTransport.sendRequest('/getClientFiles', {});\n    if (!output.status) {\n      return {\n        status: false,\n        msg: output.response,\n      };\n    }\n\n    return {\n      status: output.response.status,\n      msg: output.response.msg,\n      css: output.response.css,\n      js: output.response.js,\n    };\n  }\n}\n","import http from 'http';\nimport https, { RequestOptions } from 'https';\nimport { createHmac } from 'crypto';\n\nexport type APIResponse = {\n  status: boolean;\n  response: any;\n};\n\nexport class ApiTransport {\n  protected apiEndPointURL: string;\n  protected apiKey: string;\n  protected apiSecret: string;\n\n  private isSecure = false;\n  private mainOptions: RequestOptions = {};\n\n  constructor(apiEndPointURL: string, apiKey: string, apiSecret: string) {\n    this.apiEndPointURL = apiEndPointURL;\n    this.apiKey = apiKey;\n    this.apiSecret = apiSecret;\n\n    const url = new URL(apiEndPointURL);\n    let port = url.protocol === 'https:' ? 443 : 80;\n    this.isSecure = url.protocol === 'https:' ? true : false;\n\n    // use port if supplied with url\n    if (url.port) {\n      port = Number(url.port);\n    }\n\n    this.mainOptions = {\n      hostname: url.hostname,\n      path: url.pathname,\n      method: 'POST',\n      port,\n    };\n  }\n\n  private prepareHeader = (body: string) => {\n    const signature = createHmac('sha256', this.apiSecret)\n      .update(body)\n      .digest('hex');\n\n    return {\n      'Content-Type': 'application/json',\n      'API-KEY': this.apiKey,\n      'HASH-SIGNATURE': signature,\n    };\n  };\n\n  public sendRequest = async (path: string, body: any) => {\n    return new Promise<APIResponse>((resolve) => {\n      const output: APIResponse = {\n        status: false,\n        response: undefined,\n      };\n\n      const chunk = JSON.stringify(body);\n\n      const options = { ...this.mainOptions };\n      options.path += path;\n      options.headers = this.prepareHeader(chunk);\n\n      const req = (this.isSecure ? https : http).request(options, (res) => {\n        const body: Array<Uint8Array> = [];\n        res.on('data', (chunk) => body.push(chunk));\n\n        res.on('end', () => {\n          const resString = Buffer.concat(body).toString();\n\n          try {\n            output.status = true;\n            output.response = JSON.parse(resString);\n          } catch (error) {\n            output.status = false;\n            output.response = error;\n          }\n\n          resolve(output);\n        });\n      });\n\n      req.on('error', (error) => {\n        output.response = error.message;\n        resolve(output);\n      });\n\n      req.write(chunk);\n      req.end();\n    });\n  };\n}\n"],"names":[],"version":3,"file":"PlugNmeet.mjs.js.map"}