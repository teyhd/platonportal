type ActiveRoomInfoParams = {
    room_id: string;
};
type ActiveRoomInfoResponse = {
    status: boolean;
    msg: string;
    room?: Room;
};
type Room = {
    room_info: ActiveRoomInfo;
    participants_info: Array<ParticipantInfo>;
};
type ActiveRoomInfo = {
    room_title: string;
    room_id: string;
    sid: string;
    joined_participants: number;
    is_running: boolean;
    is_recording: boolean;
    is_active_rtmp: boolean;
    webhook_url: string;
    creation_time: number;
    metadata: string;
};
type ParticipantInfo = {
    sid: string;
    identity: string;
    state: string;
    metadata: string;
    joined_at: number;
    name: string;
    version: number;
    permission: any;
};
type CreateRoomParams = {
    room_id: string;
    max_participants?: number;
    empty_timeout?: number;
    metadata: RooMetadata;
};
type RooMetadata = {
    room_title: string;
    welcome_message?: string;
    webhook_url?: string;
    logout_url?: string;
    room_features: RoomFeaturesParams;
    default_lock_settings?: LockSettingsParams;
    copyright_conf?: CopyrightConf;
    extra_data?: string;
};
type RoomFeaturesParams = {
    allow_webcams: boolean;
    mute_on_start: boolean;
    allow_screen_share: boolean;
    allow_rtmp: boolean;
    admin_only_webcams: boolean;
    allow_view_other_webcams: boolean;
    allow_view_other_users_list: boolean;
    room_duration: number;
    enable_analytics: boolean;
    allow_virtual_bg: boolean;
    allow_raise_hand: boolean;
    auto_gen_user_id?: boolean;
    recording_features: RecordingFeaturesParams;
    chat_features: ChatFeaturesParams;
    shared_note_pad_features?: SharedNotePadFeaturesParams;
    whiteboard_features?: WhiteboardFeaturesParams;
    external_media_player_features?: ExternalMediaPlayerFeatures;
    waiting_room_features?: WaitingRoomFeatures;
    breakout_room_features?: BreakoutRoomFeatures;
    display_external_link_features?: DisplayExternalLinkFeatures;
    ingress_features?: IngressFeatures;
    speech_to_text_translation_features?: SpeechToTextTranslationFeatures;
    end_to_end_encryption_features?: EndToEndEncryptionFeatures;
};
type RecordingFeaturesParams = {
    is_allow: boolean;
    is_allow_cloud: boolean;
    is_allow_local: boolean;
    enable_auto_cloud_recording: boolean;
};
type ChatFeaturesParams = {
    allow_chat: boolean;
    allow_file_upload: boolean;
    allowed_file_types: Array<string>;
    max_file_size: number;
};
type SharedNotePadFeaturesParams = {
    allowed_shared_note_pad: boolean;
};
type WhiteboardFeaturesParams = {
    allowed_whiteboard: boolean;
    preload_file?: string;
};
type ExternalMediaPlayerFeatures = {
    allowed_external_media_player: boolean;
};
type WaitingRoomFeatures = {
    is_active: boolean;
    waiting_room_msg?: string;
};
type BreakoutRoomFeatures = {
    is_allow: boolean;
};
type DisplayExternalLinkFeatures = {
    is_allow: boolean;
};
type IngressFeatures = {
    is_allow: boolean;
};
type SpeechToTextTranslationFeatures = {
    is_allow: boolean;
    is_allow_translation: boolean;
};
type EndToEndEncryptionFeatures = {
    is_enabled: boolean;
    included_chat_messages?: boolean;
    included_whiteboard?: boolean;
};
type LockSettingsParams = {
    lock_microphone?: boolean;
    lock_webcam?: boolean;
    lock_screen_sharing?: boolean;
    lock_whiteboard?: boolean;
    lock_shared_notepad?: boolean;
    lock_chat?: boolean;
    lock_chat_send_message?: boolean;
    lock_chat_file_share?: boolean;
};
type CopyrightConf = {
    display: boolean;
    text: string;
};
type CreateRoomResponse = {
    status: boolean;
    msg: string;
    room_info?: ActiveRoomInfo;
};
type JoinTokenParams = {
    room_id: string;
    user_info: JoinTokenUserInfo;
};
type JoinTokenUserInfo = {
    name: string;
    user_id: string;
    is_admin: boolean;
    is_hidden: boolean;
    user_metadata?: JoinTokenUserMetadata;
};
type JoinTokenUserMetadata = {
    profile_pic?: string;
    record_webcam?: boolean;
    preferred_lang?: string;
    ex_user_id?: string;
    extra_data?: string;
    lock_settings?: LockSettingsParams;
};
type JoinTokenResponse = {
    status: boolean;
    msg: string;
    token?: string;
};
type IsRoomActiveParams = {
    room_id: string;
};
type IsRoomActiveResponse = {
    status: boolean;
    is_active?: boolean;
    msg: string;
};
type ActiveRoomsInfoResponse = {
    status: boolean;
    msg: string;
    rooms?: Array<Room>;
};
type EndRoomParams = {
    room_id: string;
};
type EndRoomResponse = {
    status: boolean;
    msg: string;
};
type FetchRecordingsParams = {
    room_ids: Array<string>;
    from?: number;
    limit?: number;
    order_by?: 'ASC' | 'DESC';
};
type FetchRecordingsResponse = {
    status: boolean;
    msg: string;
    result?: FetchRecordingsResult;
};
type FetchRecordingsResult = {
    total_recordings: number;
    from: number;
    limit: number;
    order_by: string;
    recordings_list: Array<RecordingInfo>;
};
type RecordingInfo = {
    record_id: string;
    room_id: string;
    room_sid: string;
    file_path: string;
    file_size: number;
    creation_time: number;
    room_creation_time: number;
};
type DeleteRecordingsParams = {
    record_id: string;
};
type DeleteRecordingsResponse = {
    status: boolean;
    msg: string;
};
type RecordingDownloadTokenParams = {
    record_id: string;
};
type RecordingDownloadTokenResponse = {
    status: boolean;
    msg: string;
    token?: string;
};
type ClientFilesResponse = {
    status: boolean;
    msg: string;
    css?: Array<string>;
    js?: Array<string>;
};
type FetchPastRoomsInfoParams = {
    room_ids?: Array<string>;
    from?: number;
    limit?: number;
    order_by?: 'ASC' | 'DESC';
};
type FetchRoomsInfoResponse = {
    status: boolean;
    msg: string;
    result?: PastRoomInfoResult;
};
type PastRoomInfoResult = {
    total_rooms: number;
    from: number;
    limit: number;
    order_by: string;
    rooms_list: Array<PastRoomInfo>;
};
type PastRoomInfo = {
    room_title: string;
    room_id: string;
    room_sid: string;
    joined_participants: number;
    webhook_url: string;
    created: string;
    ended: string;
    analytics_files_id: string;
};
type FetchAnalyticsParams = {
    room_ids: Array<string>;
    from?: number;
    limit?: number;
    order_by?: 'ASC' | 'DESC';
};
type FetchAnalyticsResponse = {
    status: boolean;
    msg: string;
    result?: FetchAnalyticsResult;
};
type FetchAnalyticsResult = {
    total_analytics: number;
    from: number;
    limit: number;
    order_by: string;
    analytics_list: Array<AnalyticsInfo>;
};
type AnalyticsInfo = {
    room_id: string;
    file_id: string;
    file_name: string;
    file_size: number;
    creation_time: number;
    room_creation_time: number;
};
type DeleteAnalyticsParams = {
    file_id: string;
};
type DeleteAnalyticsResponse = {
    status: boolean;
    msg: string;
};
type AnalyticsDownloadTokenParams = {
    file_id: string;
};
type AnalyticsDownloadTokenResponse = {
    status: boolean;
    msg: string;
    token?: string;
};
interface PlugNmeetAPI {
    /**
     * Create new room
     * @param params
     * @returns Promise<CreateRoomResponse>
     */
    createRoom(params: CreateRoomParams): Promise<CreateRoomResponse>;
    /**
     * Generate join token
     * @param params
     * @returns Promise<JoinTokenResponse>
     */
    getJoinToken(params: JoinTokenParams): Promise<JoinTokenResponse>;
    /**
     * If room is active or not
     * @param params
     * @returns Promise<IsRoomActiveResponse>
     */
    isRoomActive(params: IsRoomActiveParams): Promise<IsRoomActiveResponse>;
    /**
     * Get active room information
     * @param params
     * @returns Promise<ActiveRoomInfoResponse>
     */
    getActiveRoomInfo(params: ActiveRoomInfoParams): Promise<ActiveRoomInfoResponse>;
    /**
     * Get all active rooms
     * @returns Promise<ActiveRoomsInfoResponse>
     */
    getActiveRoomsInfo(): Promise<ActiveRoomsInfoResponse>;
    /**
     * Fetch info about past rooms
     * @param params
     * @returns Promise<FetchRoomsInfoResponse>
     */
    fetchPastRoomsInfo(params: FetchPastRoomsInfoParams): Promise<FetchRoomsInfoResponse>;
    /**
     * End active room
     * @param params
     * @returns Promise<EndRoomResponse>
     */
    endRoom(params: EndRoomParams): Promise<EndRoomResponse>;
    /**
     * Fetch analytics
     * @param params
     * @returns Promise<FetchAnalyticsResponse>
     */
    fetchAnalytics(params: FetchAnalyticsParams): Promise<FetchAnalyticsResponse>;
    /**
     * Delete analytics
     * @param params
     * @returns Promise<DeleteAnalyticsResponse>
     */
    deleteAnalytics(params: DeleteAnalyticsParams): Promise<DeleteAnalyticsResponse>;
    /**
     * Generate token to download recording
     * @param params
     * @returns Promise<AnalyticsDownloadTokenResponse>
     */
    getAnalyticsDownloadToken(params: AnalyticsDownloadTokenParams): Promise<AnalyticsDownloadTokenResponse>;
    /**
     * Fetch recordings
     * @param params
     * @returns Promise<FetchRecordingsResponse>
     */
    fetchRecordings(params: FetchRecordingsParams): Promise<FetchRecordingsResponse>;
    /**
     * Delete recording
     * @param params
     * @returns Promise<DeleteRecordingsResponse>
     */
    deleteRecordings(params: DeleteRecordingsParams): Promise<DeleteRecordingsResponse>;
    /**
     * Generate token to download recording
     * @param params
     * @returns Promise<RecordingDownloadTokenResponse>
     */
    getRecordingDownloadToken(params: RecordingDownloadTokenParams): Promise<RecordingDownloadTokenResponse>;
    /**
     * To get JS & CSS files to build interface
     * @returns Promise<ClientFilesResponse>
     */
    getClientFiles(): Promise<ClientFilesResponse>;
}
export class PlugNmeet implements PlugNmeetAPI {
    protected defaultPath: string;
    /**
     * @param serverUrl plugNmeet server URL
     * @param apiKey plugNmeet API_Key
     * @param apiSecret plugNmeet API_Secret
     */
    constructor(serverUrl: string, apiKey: string, apiSecret: string);
    /**
     * Create new room
     * @param params
     * @returns Promise<CreateRoomResponse>
     */
    createRoom(params: CreateRoomParams): Promise<CreateRoomResponse>;
    /**
     * Generate join token
     * @param params
     * @returns Promise<JoinTokenResponse>
     */
    getJoinToken(params: JoinTokenParams): Promise<JoinTokenResponse>;
    /**
     * If room is active or not
     * @param params
     * @returns Promise<IsRoomActiveResponse>
     */
    isRoomActive(params: IsRoomActiveParams): Promise<IsRoomActiveResponse>;
    /**
     * Get active room information
     * @param params
     * @returns Promise<ActiveRoomInfoResponse>
     */
    getActiveRoomInfo(params: ActiveRoomInfoParams): Promise<ActiveRoomInfoResponse>;
    /**
     * Get all active rooms
     * @returns Promise<ActiveRoomsInfoResponse>
     */
    getActiveRoomsInfo(): Promise<ActiveRoomsInfoResponse>;
    /**
     * Fetch info about past rooms
     * @param params
     * @returns Promise<FetchRoomsInfoResponse>
     */
    fetchPastRoomsInfo(params: FetchPastRoomsInfoParams): Promise<FetchRoomsInfoResponse>;
    /**
     * End active room
     * @param params
     * @returns Promise<EndRoomResponse>
     */
    endRoom(params: EndRoomParams): Promise<EndRoomResponse>;
    /**
     * Fetch analytics
     * @param params
     * @returns Promise<FetchAnalyticsResponse>
     */
    fetchAnalytics(params: FetchAnalyticsParams): Promise<FetchAnalyticsResponse>;
    /**
     * Delete analytics
     * @param params
     * @returns Promise<DeleteAnalyticsResponse>
     */
    deleteAnalytics(params: DeleteAnalyticsParams): Promise<DeleteAnalyticsResponse>;
    /**
     * Generate token to download recording
     * @param params
     * @returns Promise<AnalyticsDownloadTokenResponse>
     */
    getAnalyticsDownloadToken(params: AnalyticsDownloadTokenParams): Promise<AnalyticsDownloadTokenResponse>;
    /**
     * Fetch recordings
     * @param params
     * @returns Promise<FetchRecordingsResponse>
     */
    fetchRecordings(params: FetchRecordingsParams): Promise<FetchRecordingsResponse>;
    /**
     * Delete recording
     * @param params
     * @returns Promise<DeleteRecordingsResponse>
     */
    deleteRecordings(params: DeleteRecordingsParams): Promise<DeleteRecordingsResponse>;
    /**
     * Generate token to download recording
     * @param params
     * @returns Promise<RecordingDownloadTokenResponse>
     */
    getRecordingDownloadToken(params: RecordingDownloadTokenParams): Promise<RecordingDownloadTokenResponse>;
    /**
     * To get JS & CSS files to build interface
     * @returns Promise<ClientFilesResponse>
     */
    getClientFiles(): Promise<ClientFilesResponse>;
}

//# sourceMappingURL=index.d.ts.map
